# WORM - W. object-relational mapper

*(I haven't yet decided what the w stands for.)*

Worm is a simple, no-fuzz ORM for the JVM.

Its database schema mimics the domain model. This affects performance negatively for large datasets, but allows us to create a very straight-forward ORM for small ones.

## Usage (from Scala)

Say you want to store a class called "Maggot" with a string and an integer. First create the table in the database:

    CREATE TABLE Maggot (id INTEGER PRIMARY KEY, foo TEXT, bar NUMERIC);

Note that the first column must be a primary key called `id`. Check the "Constraints" section of this document to see what column types should be used for which data types.

Then create your class, and have it extend `Worm`:

    import no.kvikshaug.worm.Worm
    
    case class Maggot(var foo: String, bar: Int) extends Worm

Before you can use the ORM you need to call `connect`, providing the JDBC driver classname and URL.

    Worm.connect("org.sqlite.JDBC", "jdbc:sqlite:test.db")

Now you can do all sorts of crazy things:
    
    val obj1 = Maggot("hello", 42)
    val obj2 = Maggot("world", 9)

    obj1.insert
    obj2.insert
    obj1.foo = "goodbye"
    obj1.update

    val retrieved = Worm.getWhere[Maggot]("foo='world'")
    if(retrieved.isDefined) {
        retrieved.get.delete
    }

    val list = Worm.get[Maggot]
    list foreach println
    // Prints: Maggot("goodbye", 42)

Remember to disconnect when you're done:

    Worm.disconnect

### The methods you can call on your object:

- `insert` - Inserts the object into the DB
- `update` - Updates all the fields and stores them in the DB
- `delete` - Deletes this object from the DB

### The methods you can call on the Worm companion object:

- `get[T]` - Retrieve all rows of a specific object
- `getWhere[T](whereClause: String)` - Retrieve all rows matching the specified SQL where clause

## Usage (from Java)

The only difference is the `get*` methods, which are now:

- `getJava(Class<? extends Worm>)` to get all rows
- `getJavaWhere(Class<? extends Worm>, String whereClause)` to get rows matching a where clause

Here's the complete Scala example from above, rewritten for Java:

    // Maggot.java
    import no.kvikshaug.worm.Worm;
    
    public class Maggot extends Worm {
        private String foo;
        private final int bar;
    
        public Maggot(String foo, final int bar) {
            this.foo = foo;
            this.bar = bar;
        }
    
        public String getFoo() {
            return foo;
        }
    
        public void setFoo(String foo) {
            this.foo = foo;
        }
    
        public int getBar() {
            return bar;
        }
    }
    
    // Tester.java
    import no.kvikshaug.worm.Worm;
    
    import java.util.List;
    import scala.Option;
    
    public class Tester {
        public static void main(String[] args) {
            Worm.connect("org.sqlite.JDBC", "jdbc:sqlite:test.db");
            Maggot obj1 = new Maggot("hello", 42);
            Maggot obj2 = new Maggot("world", 9);
    
            obj1.insert();
            obj2.insert();
            obj1.setFoo("goodbye");
            obj1.update();
    
            Option<Maggot> retrieved = Worm.getJavaWhere(Maggot.class, "foo='world'");
            if(retrieved.isDefined()) {
                retrieved.get().delete();
            }
    
            List<Maggot> list = Worm.getJava(Maggot.class);
            for(Maggot ts: list) {
                System.out.printf("Maggot(%s, %s)\n", ts.getFoo(), ts.getBar());
            }
            // Prints: Maggot("goodbye", 42)
            Worm.disconnect();
        }
    }

Note the use of Scalas `Option`. Read more about that [here](http://www.codecommit.com/blog/scala/the-option-pattern) if you're not familiar with it.

## Constraints

The domain model classes must conform to the following standard:

- The class must only have one constructor.
- All fields to be saved must have a corresponding getter, or alternatively a method with the same name. E.g. field `foo` must have a `getFoo()` *or* a `foo()` method which retrieves the field.
- All fields to be saved must have a corresponding parameter in the class constructor.
- The fields must be declared *in the same order* that the constructor parameters are declared.
- The class cannot have a method named `__setid__`, because the Worm class defines such a method. I would prefer to avoid using such a method if possible - suggestions are much appreciated.

Use the following column types when creating the database tables:

- `INTEGER PRIMARY KEY` for the `id` row
- `NUMERIC` for: `Byte`, `Short`, `Int`, `Long`, `Float` and `Double`
- `TEXT` for: `Boolean` and `String`

## Building

- It is written in [Scala](http://www.scala-lang.org/)
- It's built with [SBT](https://github.com/harrah/xsbt)
- It has no dependencies

## TODO/Thoughts

- At the moment, you're required to create the database schema manually. Could/should this be automated in some way?
- Relationships are not yet handled
- It can't store lists or arrays.
- I have only tested the application against SQLite. I expect issues with other databases related to column types.
